Refactoring:
- create an empty_statement_t and use that instead of a NULL pointer in places
  like if, loop bodys, statements after labels

Lexer:
- Add preprocessor code
- proper handling of different file encodings, parsing non-ascii strings
- We could save some space by holding source positions in a separate (somehow
  compressed table) and only storing pointers to it on the AST.

Parser:
- the expect macros abort functions directly. This leads to some functions
  not resetting the current context properly (parse_for)
- label: declaration; is no valid C99 but we parse it anyway
- designator support for initializers
- add constant folding code
- Refactor code, so code to handle number values and strings is
  an own module and replacable
- Support some attributes. noreturn, unused, printf, scanf, packed would be
  interesting candidates
- SourcePositions could be stored selectively on expressions that really need
  them.
- check semantic for functions declared/defined in global scope and declared
  again in a local scope

ast2firm:
- output source file positions for panics...
- output variable names for uninitialized variable warnings
- handle bitfield members with 0 correctly (standard says this finished the
  current unit)

Missing Warnings:
* dead assignments (int x = 5; x = bla(); -> dead assignment at x = 5;)
* unused label
*
